// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: rps/rps/games.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Games struct {
	Index     string     `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	Player1   string     `protobuf:"bytes,2,opt,name=player1,proto3" json:"player1,omitempty"`
	Player2   string     `protobuf:"bytes,3,opt,name=player2,proto3" json:"player2,omitempty"`
	TurnHash1 string     `protobuf:"bytes,4,opt,name=turnHash1,proto3" json:"turnHash1,omitempty"`
	TurnHash2 string     `protobuf:"bytes,5,opt,name=turnHash2,proto3" json:"turnHash2,omitempty"`
	Turn1     string     `protobuf:"bytes,6,opt,name=turn1,proto3" json:"turn1,omitempty"`
	Turn2     string     `protobuf:"bytes,7,opt,name=turn2,proto3" json:"turn2,omitempty"`
	BetAmount types.Coin `protobuf:"bytes,8,opt,name=betAmount,proto3" json:"betAmount"`
}

func (m *Games) Reset()         { *m = Games{} }
func (m *Games) String() string { return proto.CompactTextString(m) }
func (*Games) ProtoMessage()    {}
func (*Games) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea2eb48810162da0, []int{0}
}
func (m *Games) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Games) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Games.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Games) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Games.Merge(m, src)
}
func (m *Games) XXX_Size() int {
	return m.Size()
}
func (m *Games) XXX_DiscardUnknown() {
	xxx_messageInfo_Games.DiscardUnknown(m)
}

var xxx_messageInfo_Games proto.InternalMessageInfo

func (m *Games) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *Games) GetPlayer1() string {
	if m != nil {
		return m.Player1
	}
	return ""
}

func (m *Games) GetPlayer2() string {
	if m != nil {
		return m.Player2
	}
	return ""
}

func (m *Games) GetTurnHash1() string {
	if m != nil {
		return m.TurnHash1
	}
	return ""
}

func (m *Games) GetTurnHash2() string {
	if m != nil {
		return m.TurnHash2
	}
	return ""
}

func (m *Games) GetTurn1() string {
	if m != nil {
		return m.Turn1
	}
	return ""
}

func (m *Games) GetTurn2() string {
	if m != nil {
		return m.Turn2
	}
	return ""
}

func (m *Games) GetBetAmount() types.Coin {
	if m != nil {
		return m.BetAmount
	}
	return types.Coin{}
}

func init() {
	proto.RegisterType((*Games)(nil), "rps.rps.Games")
}

func init() { proto.RegisterFile("rps/rps/games.proto", fileDescriptor_ea2eb48810162da0) }

var fileDescriptor_ea2eb48810162da0 = []byte{
	// 275 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x90, 0x31, 0x4f, 0x03, 0x21,
	0x18, 0x86, 0x0f, 0x6d, 0x7b, 0x1e, 0x0e, 0x26, 0x67, 0x07, 0x6c, 0x0c, 0x36, 0x4e, 0x75, 0xe1,
	0x02, 0xce, 0x0e, 0xd6, 0x41, 0xe7, 0x8e, 0x6e, 0x5c, 0x25, 0xe7, 0x25, 0x1e, 0x10, 0xa0, 0xa6,
	0xfd, 0x17, 0xfe, 0xac, 0x8e, 0x1d, 0x9d, 0x8c, 0xb9, 0xfb, 0x13, 0x8e, 0x06, 0xb0, 0xb9, 0x3a,
	0x90, 0xf0, 0x3e, 0x4f, 0x20, 0xdf, 0xf7, 0xc2, 0x73, 0xa3, 0x6d, 0xe1, 0x4f, 0xc5, 0x1b, 0x61,
	0x89, 0x36, 0xca, 0xa9, 0x3c, 0x35, 0xda, 0x12, 0xa3, 0xed, 0x64, 0x5c, 0xa9, 0x4a, 0x05, 0x56,
	0xf8, 0x5b, 0xd4, 0x13, 0xbc, 0x54, 0xb6, 0x51, 0xb6, 0x28, 0xb9, 0x15, 0xc5, 0x3b, 0x2d, 0x85,
	0xe3, 0xb4, 0x58, 0xaa, 0x5a, 0x46, 0x7f, 0xfd, 0x03, 0xe0, 0xf0, 0xd1, 0x7f, 0x97, 0x8f, 0xe1,
	0xb0, 0x96, 0x2f, 0x62, 0x8d, 0xc0, 0x14, 0xcc, 0xb2, 0x45, 0x0c, 0x39, 0x82, 0xa9, 0x7e, 0xe3,
	0x1b, 0x61, 0x28, 0x3a, 0x0a, 0x7c, 0x1f, 0x7b, 0xc3, 0xd0, 0xf1, 0xa1, 0x61, 0xf9, 0x25, 0xcc,
	0xdc, 0xca, 0xc8, 0x27, 0x6e, 0x5f, 0x29, 0x1a, 0x04, 0xd7, 0x83, 0x43, 0xcb, 0xd0, 0xf0, 0xbf,
	0x65, 0x7e, 0x0a, 0x1f, 0x28, 0x1a, 0xc5, 0x29, 0x42, 0xd8, 0x53, 0x86, 0xd2, 0x9e, 0xb2, 0xfc,
	0x0e, 0x66, 0xa5, 0x70, 0xf7, 0x8d, 0x5a, 0x49, 0x87, 0x4e, 0xa6, 0x60, 0x76, 0xca, 0x2e, 0x48,
	0xdc, 0x97, 0xf8, 0x7d, 0xc9, 0xdf, 0xbe, 0xe4, 0x41, 0xd5, 0x72, 0x3e, 0xd8, 0x7e, 0x5d, 0x25,
	0x8b, 0xfe, 0xc5, 0xfc, 0x66, 0xdb, 0x62, 0xb0, 0x6b, 0x31, 0xf8, 0x6e, 0x31, 0xf8, 0xe8, 0x70,
	0xb2, 0xeb, 0x70, 0xf2, 0xd9, 0xe1, 0xe4, 0xf9, 0xcc, 0x97, 0xbc, 0x0e, 0x55, 0xbb, 0x8d, 0x16,
	0xb6, 0x1c, 0x85, 0xb2, 0x6e, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0xec, 0x85, 0x93, 0x97, 0x82,
	0x01, 0x00, 0x00,
}

func (m *Games) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Games) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Games) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.BetAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGames(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	if len(m.Turn2) > 0 {
		i -= len(m.Turn2)
		copy(dAtA[i:], m.Turn2)
		i = encodeVarintGames(dAtA, i, uint64(len(m.Turn2)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Turn1) > 0 {
		i -= len(m.Turn1)
		copy(dAtA[i:], m.Turn1)
		i = encodeVarintGames(dAtA, i, uint64(len(m.Turn1)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.TurnHash2) > 0 {
		i -= len(m.TurnHash2)
		copy(dAtA[i:], m.TurnHash2)
		i = encodeVarintGames(dAtA, i, uint64(len(m.TurnHash2)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.TurnHash1) > 0 {
		i -= len(m.TurnHash1)
		copy(dAtA[i:], m.TurnHash1)
		i = encodeVarintGames(dAtA, i, uint64(len(m.TurnHash1)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Player2) > 0 {
		i -= len(m.Player2)
		copy(dAtA[i:], m.Player2)
		i = encodeVarintGames(dAtA, i, uint64(len(m.Player2)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Player1) > 0 {
		i -= len(m.Player1)
		copy(dAtA[i:], m.Player1)
		i = encodeVarintGames(dAtA, i, uint64(len(m.Player1)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintGames(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintGames(dAtA []byte, offset int, v uint64) int {
	offset -= sovGames(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Games) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovGames(uint64(l))
	}
	l = len(m.Player1)
	if l > 0 {
		n += 1 + l + sovGames(uint64(l))
	}
	l = len(m.Player2)
	if l > 0 {
		n += 1 + l + sovGames(uint64(l))
	}
	l = len(m.TurnHash1)
	if l > 0 {
		n += 1 + l + sovGames(uint64(l))
	}
	l = len(m.TurnHash2)
	if l > 0 {
		n += 1 + l + sovGames(uint64(l))
	}
	l = len(m.Turn1)
	if l > 0 {
		n += 1 + l + sovGames(uint64(l))
	}
	l = len(m.Turn2)
	if l > 0 {
		n += 1 + l + sovGames(uint64(l))
	}
	l = m.BetAmount.Size()
	n += 1 + l + sovGames(uint64(l))
	return n
}

func sovGames(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGames(x uint64) (n int) {
	return sovGames(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Games) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGames
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Games: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Games: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGames
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGames
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGames
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Player1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGames
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGames
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGames
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Player1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Player2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGames
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGames
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGames
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Player2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TurnHash1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGames
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGames
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGames
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TurnHash1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TurnHash2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGames
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGames
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGames
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TurnHash2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Turn1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGames
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGames
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGames
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Turn1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Turn2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGames
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGames
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGames
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Turn2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BetAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGames
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGames
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGames
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BetAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGames(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGames
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGames(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGames
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGames
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGames
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGames
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGames
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGames
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGames        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGames          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGames = fmt.Errorf("proto: unexpected end of group")
)
